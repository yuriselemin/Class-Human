


class Human:
    def __init__(self, name, age):
        self.name = name  # Присваиваем имя переменной name значение параметра name функции __init__
        self.age = age     # Присваиваем имя переменной age значение параметра age функции __init__
        self.say_info()    # Вызываем функцию say_info, которая печатает информацию о человеке

    def say_info(self):
        print(f'Привет меня зовут {self.name}, мне  {self.age}')  # Печатаем приветствие и информацию о себе

    def birthday(self):
        self.age += 1   # Увеличиваем возраст на 1
        print(f'У меня день рождения, мне теперь  {self.age} лет')  # Печатаем сообщение о дне рождении

    def __str__(self):
        return f'{self.name} {self.age}'  # Определяем способ преобразования объекта класса в строку

    def __len__(self):
        return self.age  # Определяем способ получения длины объекта класса (возвращаем возраст)

    def __lt__(self, other):
        return self.age < other.age  # Определяем способ сравнения объектов класса (меньше)

    def __gt__(self, other):
        return self.age > other.age  # Определяем способ сравнения объектов класса (больше)

    def __eq__(self, other):
        return self.age == other.age and self.name == other.name  # Определяем способ проверки равенства объектов класса

    def __bool__(self):
        return bool(self.age)  # Определяем способ проверки истинности объекта класса (истина, если есть возраст)

    def __del__(self):
        print(f'{self.name} ушел')  # Определяем способ обработки удаления объекта класса (вывод сообщения об удалении)


den = Human('Денис', 22)  # Создаем объект класса Human с именем den и возрастом 22 года
max = Human('Макс', 22)   # Создаем объект класса Human с именем max и возрастом 22 года
max.birthday()            # Проводим день рождения объекта max, увеличивая его возраст
print(len(max))           # Выводим длину объекта max (его возраст), так как перегрузка оператора len определена как возвращение возраста
print(len(den))           # Выводим длину объекта den (его возраст)
print(max < den)          # Проверяем, меньше ли max по сравнению с den, используя перегрузку оператора <
print(max > den)          # Проверяем, больше ли max по сравнению с den, используя перегрузку оператора >
print(max == den)         # Проверяем, равны ли max и den, используя перегрузку оператора ==
print(max)                # Выводим информацию о объекте max, так как перегрузка оператора str определена как возвращение информации о имени и возрасте





